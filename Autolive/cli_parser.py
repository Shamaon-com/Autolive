import argparse
import boto3
import sys
import json
from .errors import MissingStreamError, WrongCodecError


class parse_data:
    def __init__(self, dataType, values):
        self.type = dataType
        self.values = values
        self.data = self.run()

    def run(self):
        print(self.type)
        if self.type == 'FFprobe':
            return self.parse_FFprobe(self.values)
        if self.type == 'Debug':
            return self.sample_config()


    def sample_config(self):
        return {
            'audio_codec': 'aac',
            'audio_sample_rate': 48000,
            'audio_bitrate': 160000,
            'video_codec': 'h264',
            'video_profile': 'high',
            'video_width': 1920,
            'video_height': 1080,
            'video_fps': 60,
            'video_bitrate': 8000          
        }

    def parse_FFprobe(self, data):
        """ Extracts and validates values of json object generated by ffprobe.
        """
        supported_codecs = ['aac', 'h264']
        
        streams = json.loads(data)['streams']
        if len(streams) < 2:
            raise MissingStreamError(streams)

        audio = None
        video = None
        for stream in streams:
            try:
                if stream['codec_name'] == 'aac':
                    audio = stream
                if stream['codec_name'] == 'h264':
                    video = stream
            except:
                pass
        if audio == None or video == None:
            raise WrongCodecError(streams)

        return {
            'audio_codec': audio['codec_name'],
            'audio_sample_rate': int(audio['sample_rate']),
            'audio_bitrate': int(audio['bit_rate']),
            'video_codec': video['codec_name'],
            'video_profile': video['profile'],
            'video_width': int(video['width']),
            'video_height': int(video['height']),
            'video_fps': int(video['r_frame_rate'].split('/')[0]),
            'video_bitrate': round(int(video['bit_rate'])/1000)
            }


class validateKey(argparse.Action):
    pass

